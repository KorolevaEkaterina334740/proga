import json
import random
import pathlib
import copy as cp
from pprint import pprint as pp

Cell = tuple[int, int]
Cells = list
Grid = list[list[int]]


class GameOfLife:

    def __init__(self, size: tuple[int, int], randomize: bool=True, max_generations: int=None) -> None:
        # –†–∞–∑–º–µ—Ä –∫–ª–µ—Ç–æ—á–Ω–æ–≥–æ –ø–æ–ª—è
        self.rows, self.cols = size
        # –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ –∫–ª–µ—Ç–æ–∫
        self.prev_generation = self.create_grid()
        # –¢–µ–∫—É—â–µ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ –∫–ª–µ—Ç–æ–∫
        self.curr_generation = self.create_grid(randomize=randomize)
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π
        self.max_generations = max_generations
        # –¢–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π
        self.generations = 1


    def create_grid(self, randomize: bool=False) -> Grid:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–µ—Ç–æ–∫.

        –ö–ª–µ—Ç–∫–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∂–∏–≤–æ–π, –µ—Å–ª–∏ –µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ 1, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –∫–ª–µ—Ç–∫–∞
        —Å—á–∏—Ç–∞–µ—Ç—Å—è –º–µ—Ä—Ç–≤–æ–π, —Ç–æ –µ—Å—Ç—å, –µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ 0.
        """
        if randomize:
            return [[random.randint(0,1) for j in range(self.cols)] for i in range(self.rows)]
        else: 
            return [[0 for j in range(self.cols)] for i in range(self.rows)]


    def get_neighbours(self, cell: tuple) -> Cells:
        """
        –í–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–ª–µ—Ç–æ–∫ –¥–ª—è –∫–ª–µ—Ç–∫–∏ `cell`.
        –°–æ—Å–µ–¥–Ω–∏–º–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è –∫–ª–µ—Ç–∫–∏ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏, –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –∏ –¥–∏–∞–≥–æ–Ω–∞–ª—è–º,
        —Ç–æ –µ—Å—Ç—å, –≤–æ –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö.

        """
        neighs = []
        for a in range(-1, 2):
            for b in range(-1, 2):
                if (cell[0]+a < 0) or (cell[0]+a >= self.rows) or (cell[1]+b < 0) or (cell[1]+b >= self.cols) or (a == b == 0): continue
                y_bound, x_bound = cell[0]+a, cell[1]+b
                if (y_bound >= 0) and (y_bound < self.rows) and (x_bound >= 0) and (x_bound < self.cols):
                    if self.curr_generation[y_bound][x_bound] == 1: neighs.append([y_bound, x_bound])
        return neighs

    def get_next_generation(self) -> Grid:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ –∫–ª–µ—Ç–æ–∫.
        Returns
        ----------
        out : Grid
            –ù–æ–≤–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ –∫–ª–µ—Ç–æ–∫.
        """
        newgen = []
        next = cp.deepcopy(self.curr_generation)
        for y in range(len(self.curr_generation)):
            for x in range(len(self.curr_generation[y])):
                cell = (y, x)
                if self.curr_generation[y][x] == 1 and (len(self.get_neighbours(cell)) == 2 or len(self.get_neighbours(cell)) == 3):
                    newgen.append([y, x])
                elif self.curr_generation[y][x] == 0 and len(self.get_neighbours(cell)) == 3:
                    newgen.append([y, x])

        for y in range(len(next)):
            for x in range(len(next[y])):
                if [y, x] in newgen: next[y][x] = 1
                else: next[y][x] = 0

        return next


    def step(self) -> None:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω —à–∞–≥ –∏–≥—Ä—ã.
        """
        self.prev_generation = cp.deepcopy(self.curr_generation)
        self.curr_generation = self.get_next_generation()
        self.generations += 1
        pass

    @property
    def is_max_generations_exceeded(self) -> bool:
        """
        –ù–µ –ø—Ä–µ–≤—ã—Å–∏–ª–æ –ª–∏ —Ç–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ.
        """
        if (self.max_generations == None): return False
        else: return  self.generations > self.max_generations


    @property
    def is_changing(self) -> bool:
        """
        –ò–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–µ—Ç–æ–∫ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞.
        """
        return self.prev_generation != self.curr_generation

    @staticmethod
    def from_file(filename: pathlib.Path) -> "GameOfLife": #better to use full pathname
        """
        –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–µ—Ç–æ–∫ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
        """
        with open(filename, "r") as f:
            saved_data = json.load(f)
        size = (len(saved_data), len(saved_data[0]))
        game = GameOfLife(size=size, randomize=False)
        game.curr_generation = saved_data
        return game

    def save(self, filename: pathlib.Path) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–µ—Ç–æ–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª.
        """
        with open(filename, "w") as f:
            json.dump(self.curr_generation, fp=f)
        print("Data was saved in {}".format(pathlib.Path(filename).absolute()))
        pass

def main():
    filename = "gen{}.txt"

    def gen_path(step):
        return pathlib.Path(filename.format(step)).absolute()

    # New game
    game = GameOfLife(size=(10, 10))
    game.save(gen_path("_start")) #file to save start data

    #making steps
    game.step()
    game.save(gen_path(1))

    # loading game from save *and save again üòé*
    game = GameOfLife.from_file(gen_path(1))
    game.step()
    game.save(gen_path(2))


if __name__ == "__main__":
    main()
